{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "###0. import the random library\n",
        "*We'll use it to deal with an edge case where the input equals the threshold.*"
      ],
      "metadata": {
        "id": "ztxc7kuO2Zry"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yuy1uOw7z_5b"
      },
      "outputs": [],
      "source": [
        "import random"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###1. Prepare our data"
      ],
      "metadata": {
        "id": "c8SNZ1MOm62k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = [[3, \"small\"], [4, \"small\"], [6, \"small\"], [14, \"big\"], [14, \"big\"], [17, \"big\"]]"
      ],
      "metadata": {
        "id": "IqAgWC3d0GtL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###2. Train the model\n",
        "*Finds the treshold and classes*\n",
        "\n"
      ],
      "metadata": {
        "id": "e6TzrJMGnAEo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def train(data):\n",
        "    starting_class = data[0][1]\n",
        "    for i in range(len(data)):\n",
        "        if data[i][1] != starting_class:\n",
        "            threshold = (data[i][0] + data[i-1][0])/2\n",
        "            ending_class = data[i][1]\n",
        "            return [starting_class, ending_class, threshold]"
      ],
      "metadata": {
        "id": "jdZkvyzq0MJU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###3. Store our learned rules in a variable\n",
        "\n"
      ],
      "metadata": {
        "id": "QY7y8Ga-noo8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "information = train(data)\n",
        "\n",
        "print(\"Threshold:\" + str(information[2]))"
      ],
      "metadata": {
        "id": "rFYlwRVV0TO9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###4. Define the prediction function\n",
        "*Contains the logic and structure of the decision tree*"
      ],
      "metadata": {
        "id": "j8EtHX5eop-c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def predict(x, threshold):\n",
        "    if x < threshold:\n",
        "        return information[0]\n",
        "    elif x == threshold:\n",
        "        random_number = random.randint(1, 2)\n",
        "        if random_number == 1:\n",
        "            return information[0]\n",
        "        else:\n",
        "            return information[1]\n",
        "    elif x > threshold:\n",
        "        return information[1]"
      ],
      "metadata": {
        "id": "nxOMTb2S0ZEF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###5. Take user input"
      ],
      "metadata": {
        "id": "aueI-58bo4dg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = float(input(\"What x value wuld you like to predict? \"))"
      ],
      "metadata": {
        "id": "TNyNa7vZ0cz7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###6. Return the prediction"
      ],
      "metadata": {
        "id": "RS6xznCko7J9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prediction = predict(x, information[2])\n",
        "print(\"Prediction: \"+prediction)"
      ],
      "metadata": {
        "id": "qJcuLBm-0hEl"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
